set -g repeat-time 1000
set-option -g prefix C-a
set -s escape-time 1
set -g base-index 1
set -g pane-base-index 1

# set-option -g default-command "reattach-to-user-namespace -l zsh"


# mouse stuff
#setw -g mode-mouse off
#set -g mouse-select-pane off
#set -g mouse-resize-pane off
#set -g mouse-select-window off
set -g mouse on

bind -r a next-window
bind -r Right next-window
bind -r A previous-window
bind -r Left previous-window

# status
set -g status-left-length 40
set -g status-right-length 40
set -g status-left "#S|#(uptime | awk '{ print $9 }' | sed 's/,//g')|#(upower -i /org/freedesktop/UPower/devices/battery_BAT0 | grep percentage | awk '{ print $2 }')"
set -g status-right "#(date --iso-8601=seconds | cut -d '+' -f 1)"

set -g status-justify centre
set -g status-interval 10

unbind %
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# VIM setting

# splitting
bind | split-window -c "#{pane_current_path}" -h
bind v split-window -c "#{pane_current_path}" -h
bind - split-window -c "#{pane_current_path}" -v
bind s split-window -c "#{pane_current_path}" -v

bind-key l choose-session
bind-key n new-session

bind c new-window -c "#{pane_current_path}"

# resizing
bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U

bind -r H resize-pane -L 1
bind -r J resize-pane -D 1
bind -r K resize-pane -U 1
bind -r L resize-pane -R 1

setw -g aggressive-resize on

setw -g mode-keys vi
set-option -g status-keys vi
bind-key -t vi-copy 'v' begin-selection
bind-key -t vi-copy 'V' begin-selection
bind-key -t vi-copy 'y' copy-pipe "pbcopy" # for OSX
# bind-key -t vi-copy 'y' copy-pipe "xsel -i -b"
bind p paste-buffer

bind Escape copy-mode

# bind C-v run "tmux set-buffer -- \"$(xsel -b -o)\"; tmux paste-buffer"
bind C-v run "tmux set-buffer -- \"$(pbpaste)\"; tmux paste-buffer" # for OSX

set -g default-terminal "xterm-256color"

set -g status-fg colour231
set -g status-fg colour231
set -g status-bg colour236
set -g status-left-length 21
set -g status-left '#[fg=colour16,bg=colour254,bold] #S #[fg=colour254,bg=colour234,nobold]'
set -g status-right '#(eval tmux-airline `tmux display -p "#{client_width}"`)'
set -g status-right-length 150

set -g window-status-format "#[fg=colour244,bg=colour234]#I #[fg=colour240] #[default]#W "
set -g window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I  #[fg=colour231,bold]#W #[fg=colour31,bg=colour234,nobold]"

set-window-option -g window-status-fg colour249
set-window-option -g window-status-activity-attr none
set-window-option -g window-status-bell-attr none
set-window-option -g window-status-activity-fg yellow
set-window-option -g window-status-bell-fg red
set -g status-bg colour234
set -g status-left-length 20
set -g status-left '#[fg=colour16,bg=colour254,bold] #S #[fg=colour254,bg=colour234,nobold]'
set -g status-right '#(eval tmux-airline `tmux display -p "#{client_width}"`)'
set -g status-right-length 150

set -g window-status-format "#[fg=colour244,bg=colour234] #I #[fg=colour240] #[default]#W"
set -g window-status-current-format "#[fg=colour234,bg=colour31]#[fg=colour117,bg=colour31] #I #[fg=colour231,bold] #W #[fg=colour31,bg=colour234,nobold]"

set-window-option -g window-status-fg colour249
set-window-option -g window-status-activity-attr none
set-window-option -g window-status-bell-attr none
set-window-option -g window-status-activity-fg yellow
set-window-option -g window-status-bell-fg red

setw -g monitor-activity on
set -g visual-activity on

# send double C-a to e.g. shell
bind C-a send-prefix

# set-option -g default-shell /bin/bash

# zooming in and out
unbind Up
bind Up new-window -d -n tmp \; swap-pane -s tmp.1 \; select-window -t tmp
unbind Down
bind Down last-window \; swap-pane -s tmp.1 \; kill-window -t tmp

# Smart pane switching with awareness of vim splits
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

